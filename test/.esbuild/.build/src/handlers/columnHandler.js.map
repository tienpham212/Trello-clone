{
  "version": 3,
  "sources": ["../../../../node_modules/@middy/core/index.js", "../../../../node_modules/@middy/util/index.js", "../../../../node_modules/@middy/http-json-body-parser/index.js", "../../../../src/handlers/columnHandler.ts", "../../../../src/libs/api-gateway.ts", "../../../../src/libs/lambda.ts", "../../../../src/Service/DatabaseService.ts", "../../../../src/Service/BoardServices.ts"],
  "sourcesContent": ["\"use strict\";\n\nconst middy = (baseHandler = () => {}, plugin) => {\n  var _plugin$beforePrefetc;\n\n  plugin === null || plugin === void 0 ? void 0 : (_plugin$beforePrefetc = plugin.beforePrefetch) === null || _plugin$beforePrefetc === void 0 ? void 0 : _plugin$beforePrefetc.call(plugin);\n  const beforeMiddlewares = [];\n  const afterMiddlewares = [];\n  const onErrorMiddlewares = [];\n\n  const instance = (event = {}, context = {}) => {\n    var _plugin$requestStart;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$requestStart = plugin.requestStart) === null || _plugin$requestStart === void 0 ? void 0 : _plugin$requestStart.call(plugin);\n    const request = {\n      event,\n      context,\n      response: undefined,\n      error: undefined,\n      internal: {}\n    };\n    return runRequest(request, [...beforeMiddlewares], baseHandler, [...afterMiddlewares], [...onErrorMiddlewares], plugin);\n  };\n\n  instance.use = middlewares => {\n    if (Array.isArray(middlewares)) {\n      for (const middleware of middlewares) {\n        instance.applyMiddleware(middleware);\n      }\n\n      return instance;\n    }\n\n    return instance.applyMiddleware(middlewares);\n  };\n\n  instance.applyMiddleware = middleware => {\n    const {\n      before,\n      after,\n      onError\n    } = middleware;\n\n    if (!before && !after && !onError) {\n      throw new Error('Middleware must be an object containing at least one key among \"before\", \"after\", \"onError\"');\n    }\n\n    if (before) instance.before(before);\n    if (after) instance.after(after);\n    if (onError) instance.onError(onError);\n    return instance;\n  }; // Inline Middlewares\n\n\n  instance.before = beforeMiddleware => {\n    beforeMiddlewares.push(beforeMiddleware);\n    return instance;\n  };\n\n  instance.after = afterMiddleware => {\n    afterMiddlewares.unshift(afterMiddleware);\n    return instance;\n  };\n\n  instance.onError = onErrorMiddleware => {\n    onErrorMiddlewares.push(onErrorMiddleware);\n    return instance;\n  };\n\n  instance.__middlewares = {\n    before: beforeMiddlewares,\n    after: afterMiddlewares,\n    onError: onErrorMiddlewares\n  };\n  return instance;\n};\n\nconst runRequest = async (request, beforeMiddlewares, baseHandler, afterMiddlewares, onErrorMiddlewares, plugin) => {\n  try {\n    await runMiddlewares(request, beforeMiddlewares, plugin); // Check if before stack hasn't exit early\n\n    if (request.response === undefined) {\n      var _plugin$beforeHandler, _plugin$afterHandler;\n\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeHandler = plugin.beforeHandler) === null || _plugin$beforeHandler === void 0 ? void 0 : _plugin$beforeHandler.call(plugin);\n      request.response = await baseHandler(request.event, request.context);\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$afterHandler = plugin.afterHandler) === null || _plugin$afterHandler === void 0 ? void 0 : _plugin$afterHandler.call(plugin);\n      await runMiddlewares(request, afterMiddlewares, plugin);\n    }\n  } catch (e) {\n    // Reset response changes made by after stack before error thrown\n    request.response = undefined;\n    request.error = e;\n\n    try {\n      await runMiddlewares(request, onErrorMiddlewares, plugin);\n    } catch (e) {\n      // Save error that wasn't handled\n      e.originalError = request.error;\n      request.error = e;\n      throw request.error;\n    } // Catch if onError stack hasn't handled the error\n\n\n    if (request.response === undefined) throw request.error;\n  } finally {\n    var _plugin$requestEnd;\n\n    await (plugin === null || plugin === void 0 ? void 0 : (_plugin$requestEnd = plugin.requestEnd) === null || _plugin$requestEnd === void 0 ? void 0 : _plugin$requestEnd.call(plugin, request));\n  }\n\n  return request.response;\n};\n\nconst runMiddlewares = async (request, middlewares, plugin) => {\n  for (const nextMiddleware of middlewares) {\n    var _plugin$beforeMiddlew, _plugin$afterMiddlewa;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeMiddlew = plugin.beforeMiddleware) === null || _plugin$beforeMiddlew === void 0 ? void 0 : _plugin$beforeMiddlew.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name);\n    const res = await (nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware(request));\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$afterMiddlewa = plugin.afterMiddleware) === null || _plugin$afterMiddlewa === void 0 ? void 0 : _plugin$afterMiddlewa.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name); // short circuit chaining and respond early\n\n    if (res !== undefined) {\n      request.response = res;\n      return;\n    }\n  }\n};\n\nmodule.exports = middy;\n", "\"use strict\";\n\nconst {\n  Agent\n} = require('https'); // const { NodeHttpHandler } = require('@aws-sdk/node-http-handler') // aws-sdk v3\n\n\nconst awsClientDefaultOptions = {\n  // AWS SDK v3\n  // Docs: https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/enforcing-tls.html\n\n  /* requestHandler: new NodeHttpHandler({\n    httpsAgent: new Agent(\n      {\n        secureProtocol: 'TLSv1_2_method'\n      }\n    )\n  }) */\n  // Docs: https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/enforcing-tls.html\n  httpOptions: {\n    agent: new Agent({\n      secureProtocol: 'TLSv1_2_method'\n    })\n  }\n};\n\nconst createPrefetchClient = options => {\n  const awsClientOptions = { ...awsClientDefaultOptions,\n    ...options.awsClientOptions\n  };\n  const client = new options.AwsClient(awsClientOptions); // AWS XRay\n\n  if (options.awsClientCapture) {\n    return options.awsClientCapture(client);\n  }\n\n  return client;\n};\n\nconst createClient = async (options, request) => {\n  let awsClientCredentials = {}; // Role Credentials\n\n  if (options.awsClientAssumeRole) {\n    if (!request) throw new Error('Request required when assuming role');\n    awsClientCredentials = await getInternal({\n      credentials: options.awsClientAssumeRole\n    }, request);\n  }\n\n  awsClientCredentials = { ...awsClientCredentials,\n    ...options.awsClientOptions\n  };\n  return createPrefetchClient({ ...options,\n    awsClientOptions: awsClientCredentials\n  });\n};\n\nconst canPrefetch = options => {\n  return !(options !== null && options !== void 0 && options.awsClientAssumeRole) && !(options !== null && options !== void 0 && options.disablePrefetch);\n}; // Internal Context\n\n\nconst getInternal = async (variables, request) => {\n  if (!variables || !request) return {};\n  let keys = [];\n  let values = [];\n\n  if (variables === true) {\n    keys = values = Object.keys(request.internal);\n  } else if (typeof variables === 'string') {\n    keys = values = [variables];\n  } else if (Array.isArray(variables)) {\n    keys = values = variables;\n  } else if (typeof variables === 'object') {\n    keys = Object.keys(variables);\n    values = Object.values(variables);\n  }\n\n  const promises = [];\n\n  for (const internalKey of values) {\n    var _valuePromise;\n\n    // 'internal.key.sub_value' -> { [key]: internal.key.sub_value }\n    const pathOptionKey = internalKey.split('.');\n    const rootOptionKey = pathOptionKey.shift();\n    let valuePromise = request.internal[rootOptionKey];\n\n    if (typeof ((_valuePromise = valuePromise) === null || _valuePromise === void 0 ? void 0 : _valuePromise.then) !== 'function') {\n      valuePromise = Promise.resolve(valuePromise);\n    }\n\n    promises.push(valuePromise.then(value => pathOptionKey.reduce((p, c) => p === null || p === void 0 ? void 0 : p[c], value)));\n  } // ensure promise has resolved by the time it's needed\n  // If one of the promises throws it will bubble up to @middy/core\n\n\n  values = await Promise.allSettled(promises);\n  const errors = values.filter(res => res.status === 'rejected').map(res => res.reason.message);\n  if (errors.length) throw new Error(JSON.stringify(errors));\n  return keys.reduce((obj, key, index) => ({ ...obj,\n    [sanitizeKey(key)]: values[index].value\n  }), {});\n};\n\nconst sanitizeKeyPrefixLeadingNumber = /^([0-9])/;\nconst sanitizeKeyRemoveDisallowedChar = /[^a-zA-Z0-9]+/g;\n\nconst sanitizeKey = key => {\n  return key.replace(sanitizeKeyPrefixLeadingNumber, '_$1').replace(sanitizeKeyRemoveDisallowedChar, '_');\n}; // fetch Cache\n\n\nconst cache = {}; // key: { value:{fetchKey:Promise}, expiry }\n\nconst processCache = (options, fetch = () => undefined, request) => {\n  const {\n    cacheExpiry,\n    cacheKey\n  } = options;\n\n  if (cacheExpiry) {\n    const cached = getCache(cacheKey);\n    const unexpired = cached && (cacheExpiry < 0 || cached.expiry > Date.now());\n\n    if (unexpired && cached.modified) {\n      const value = fetch(request, cached.value);\n      cache[cacheKey] = {\n        value: { ...cached.value,\n          ...value\n        },\n        expiry: cached.expiry\n      };\n      return cache[cacheKey];\n    }\n\n    if (unexpired) {\n      return { ...cached,\n        cache: true\n      };\n    }\n  }\n\n  const value = fetch(request);\n  const expiry = Date.now() + cacheExpiry;\n\n  if (cacheExpiry) {\n    cache[cacheKey] = {\n      value,\n      expiry\n    };\n  }\n\n  return {\n    value,\n    expiry\n  };\n};\n\nconst getCache = key => {\n  return cache[key];\n}; // Used to remove parts of a cache\n\n\nconst modifyCache = (cacheKey, value) => {\n  if (!cache[cacheKey]) return;\n  cache[cacheKey] = { ...cache[cacheKey],\n    value,\n    modified: true\n  };\n};\n\nconst clearCache = (keys = null) => {\n  var _keys;\n\n  keys = (_keys = keys) !== null && _keys !== void 0 ? _keys : Object.keys(cache);\n  if (!Array.isArray(keys)) keys = [keys];\n\n  for (const cacheKey of keys) {\n    cache[cacheKey] = undefined;\n  }\n};\n\nconst jsonSafeParse = (string, reviver) => {\n  if (typeof string !== 'string') return string;\n  const firstChar = string[0];\n  if (firstChar !== '{' && firstChar !== '[' && firstChar !== '\"') return string;\n\n  try {\n    return JSON.parse(string, reviver);\n  } catch (e) {}\n\n  return string;\n};\n\nconst normalizeHttpResponse = response => {\n  var _response$headers, _response;\n\n  // May require updating to catch other types\n  if (response === undefined) {\n    response = {};\n  } else if (Array.isArray(response) || typeof response !== 'object' || response === null) {\n    response = {\n      body: response\n    };\n  }\n\n  response.headers = (_response$headers = (_response = response) === null || _response === void 0 ? void 0 : _response.headers) !== null && _response$headers !== void 0 ? _response$headers : {};\n  return response;\n}; // smaller version of `http-errors`\n\n\nconst statuses = require('./codes.json');\n\nconst {\n  inherits\n} = require('util');\n\nconst createErrorRegexp = /[^a-zA-Z]/g;\n\nconst createError = (code, message, properties = {}) => {\n  const name = statuses[code].replace(createErrorRegexp, '');\n  const className = name.substr(-5) !== 'Error' ? name + 'Error' : name;\n\n  function HttpError(message) {\n    // create the error object\n    const msg = message !== null && message !== void 0 ? message : statuses[code];\n    const err = new Error(msg); // capture a stack trace to the construction point\n\n    Error.captureStackTrace(err, HttpError); // adjust the [[Prototype]]\n\n    Object.setPrototypeOf(err, HttpError.prototype); // redefine the error message\n\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    }); // redefine the error name\n\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n\n  inherits(HttpError, Error);\n  const desc = Object.getOwnPropertyDescriptor(HttpError, 'name');\n  desc.value = className;\n  Object.defineProperty(HttpError, 'name', desc);\n  Object.assign(HttpError.prototype, {\n    status: code,\n    statusCode: code,\n    expose: code < 500\n  }, properties);\n  return new HttpError(message);\n};\n\nmodule.exports = {\n  createPrefetchClient,\n  createClient,\n  canPrefetch,\n  getInternal,\n  sanitizeKey,\n  processCache,\n  getCache,\n  modifyCache,\n  clearCache,\n  jsonSafeParse,\n  normalizeHttpResponse,\n  createError\n};\n", "\"use strict\";\n\nconst mimePattern = /^application\\/(.+\\+)?json(;.*)?$/;\nconst defaults = {\n  reviver: undefined\n};\n\nconst httpJsonBodyParserMiddleware = (opts = {}) => {\n  const options = { ...defaults,\n    ...opts\n  };\n\n  const httpJsonBodyParserMiddlewareBefore = async request => {\n    var _headers$ContentType;\n\n    const {\n      headers,\n      body\n    } = request.event;\n    const contentTypeHeader = (_headers$ContentType = headers === null || headers === void 0 ? void 0 : headers['Content-Type']) !== null && _headers$ContentType !== void 0 ? _headers$ContentType : headers === null || headers === void 0 ? void 0 : headers['content-type'];\n\n    if (mimePattern.test(contentTypeHeader)) {\n      try {\n        const data = request.event.isBase64Encoded ? Buffer.from(body, 'base64').toString() : body;\n        request.event.rawBody = body;\n        request.event.body = JSON.parse(data, options.reviver);\n      } catch (err) {\n        const {\n          createError\n        } = require('@middy/util'); // UnprocessableEntity\n\n\n        throw createError(422, 'Content type defined as JSON but an invalid JSON was provided');\n      }\n    }\n  };\n\n  return {\n    before: httpJsonBodyParserMiddlewareBefore\n  };\n};\n\nmodule.exports = httpJsonBodyParserMiddleware;\n", "import type {ValidatedEventAPIGatewayProxyEvent} from \"@libs/api-gateway\";\nimport {formatJSONResponse} from \"@libs/api-gateway\";\nimport {middyfy} from \"@libs/lambda\";\nimport columnSchema from \"src/schemas/columnSchema\";\nimport { BoardServices } from \"src/Service/BoardServices\";\n\nconst createColumns:ValidatedEventAPIGatewayProxyEvent<typeof columnSchema> = async (event) => {\n  const {id, title, cardOrder} = event.body.name;\n  try {\n     const addColumn = await BoardServices.addColumn(id, cardOrder, title);\n     if (addColumn) {\n       return formatJSONResponse({\n         message: \"Successfully added column \",\n         addColumn,\n       });\n     } \n  } catch (error) {\n    return formatJSONResponse({\n      message: \"Unexpected error create column\",\n      error,\n    });\n  }\n \n\n  \n  \n};\n\nconst getAllColumns:ValidatedEventAPIGatewayProxyEvent<typeof columnSchema> = async (event) => {\n    try {\n        const results = await BoardServices.getAllColumns();\n        if (results) {\n          return formatJSONResponse({\n            message: \"Successfully get all column \",\n            results,\n          });\n        } \n    } catch (error) {\n        return formatJSONResponse({\n          message: \"Unexpected error get column\",\n          error,\n        });\n    }\n};\n\nconst getColumn:ValidatedEventAPIGatewayProxyEvent<{type: \"object\", properties: {id: {type: \"string\"}}}> = async (event) => {\n    try {\n        const columnId = event.body.id;\n        const data = await BoardServices.getColumn(columnId);\n        if (data) {\n          return formatJSONResponse({\n            message: \"Successfully get column \",\n            data,\n          });\n        } \n    } catch (error) {\n       console.log(error);\n       \n    }\n};\n\nconst deleteColumn:ValidatedEventAPIGatewayProxyEvent<{type: \"object\", properties: {id: {type: \"string\"}}}> = async (event) => {\n    try {\n        const columnId = event.body.id;\n        const data = await BoardServices.deleteColumn(columnId);\n        if (data) {\n          return formatJSONResponse({\n            message: \"Successfully delete column \",\n            data,\n          });\n        } \n    } catch (error) {\n       console.log(error);\n    }\n};\n\nexport const create = middyfy(createColumns);\nexport const getAll = middyfy(getAllColumns);\nexport const getOne = middyfy(getColumn);\nexport const deleteCol = middyfy(deleteColumn);\n\n", "import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\nimport type { FromSchema } from \"json-schema-to-ts\";\n\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\n\nexport const formatJSONResponse = (response: Record<string, unknown>) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify(response)\n  }\n}\n", "import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n", "import { IBoardItem } from \"src/Types/DatabaseTypes\";\n\nconst AWS = require(\"aws-sdk\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nclass DatabaseService {\n  public readonly dynamoDb: any;\n  public readonly boardTableName: string;\n\n  constructor() {\n    this.dynamoDb = dynamoDb;\n    this.boardTableName = process.env.DYNAMODB_TABLE;\n  }\n  /**\n   * description: Add new column to boad database\n   * @param {Object} column required\n   * @return {Object} added item\n   */\n  public async addColumn(column: IBoardItem): Promise<IBoardItem> {\n    const putParams = {\n      TableName: this.boardTableName,\n      Item: column,\n      ReturnValues: \"ALL_OLD\",\n    };\n    const item = await this.dynamoDb.put(putParams).promise();\n    if (!item) {\n      throw new Error(\"add Column fail\");\n    }\n    return item;\n  }\n\n  public async getAllColumns(): Promise<any> {\n    const scanParams = {\n      TableName: this.boardTableName,\n    };\n    const results = await this.dynamoDb.scan(scanParams).promise();\n\n    if (results.Count === 0) {\n      throw new Error(`${this.boardTableName} no record found`);\n    }\n    return results;\n  }\n\n  public async getColumn(id: string): Promise<any> {\n    const scanParams = {\n      TableName: this.boardTableName,\n      Key: {\n        primary_key: id,\n      },\n    };\n    const data = await this.dynamoDb.get(scanParams).promise();\n    if (!data || Object.keys(data).length === 0) {\n      throw new Error(`${id} no record found`);\n    }\n    return data;\n  }\n\n  public async deleteColumn(id: string): Promise<any> {\n    const scanParams = {\n      TableName: this.boardTableName,\n      Key: {\n        primary_key: id,\n      },\n      ReturnValues: \"ALL_OLD\",\n    };\n    const data = await this.dynamoDb.delete(scanParams).promise();\n    if (!data || Object.keys(data).length === 0) {\n      throw new Error(`${id} no record found`);\n    }\n    return data;\n  }\n}\n\nexport const databaseService = new DatabaseService();\n", "import { IBoardItem } from \"src/Types/DatabaseTypes\";\nimport { databaseService } from \"./DatabaseService\";\n\nexport class BoardServices {\n  /**\n   * description: Add new column to boad\n   * @param {string} columnId required\n   * @param {array} cardOrder order of cards in columns\n   * @param {string} title column title\n   * @return {object} added item\n   */\n  public static async addColumn(\n    columnId: string,\n    cardOrder: string[],\n    title: string\n  ): Promise<IBoardItem> {\n    const column: IBoardItem = {\n      primary_key: columnId,\n      cardOrder: cardOrder,\n      title: title,\n    };\n    const AddedColumn = await databaseService.addColumn(column);\n\n    if (!AddedColumn) throw new Error(\"Board service false to add item\");\n\n    return AddedColumn;\n  }\n\n  /**\n   * description: get board columns\n   * @return {object} list of columns\n   */\n  public static async getAllColumns(): Promise<any> {\n    const results = await databaseService.getAllColumns();\n    if (!results) throw new Error(\"Board service false to get columns\");\n    return results;\n  }\n\n  /**\n   * description: get column by id\n   * @return {object} column by id\n   */\n  public static async getColumn(columnId: string): Promise<any> {\n    const data = await databaseService.getColumn(columnId);\n    if (!data) throw new Error(\"Board service false to get column\");\n    return data;\n  }\n\n  /**\n   * description: delete column by id\n   * @return {object} deleted item\n   */\n  public static async deleteColumn(columnId: string): Promise<any> {\n    const data = await databaseService.deleteColumn(columnId);\n    if (!data) throw new Error(\"Board service false to get column\");\n    return data;\n  }\n}\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["module", "middy", "e", "module", "value", "message", "module", "middy", "middyJsonBodyParser"]
}
